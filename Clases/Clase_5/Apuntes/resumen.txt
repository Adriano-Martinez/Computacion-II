üß† Resumen: Queues en Programaci√≥n Concurrente (Computaci√≥n II)
1. üìò Fundamentos te√≥ricos
Una Queue (cola) es una estructura de datos FIFO (First-In First-Out) que se usa para comunicaci√≥n segura y ordenada entre procesos.

En programaci√≥n concurrente, permiten pasar datos entre procesos sin usar archivos compartidos ni acceso simult√°neo a memoria.

Son fundamentales en sistemas operativos para gestionar tareas entre procesos productores y consumidores.

2. üîß Implementaci√≥n y ciclo de vida
En Python se usan con el m√≥dulo multiprocessing, a trav√©s de multiprocessing.Queue().

Ciclo de vida:

Se crea en el proceso principal.

Se comparte entre procesos hijos.

Los procesos productores usan .put() para enviar datos.

Los procesos consumidores usan .get() para recibir datos.

Se puede usar un valor especial (None, "END", etc.) como marcador de final para cerrar la cola.

3. üêç Implementaci√≥n en Python
python
Copiar
Editar
from multiprocessing import Process, Queue

def productor(q):
    for i in range(10):
        q.put(i)
    q.put(None)  # Se√±al de fin

def consumidor(q):
    while True:
        dato = q.get()
        if dato is None:
            break
        print(f"[Consumidor] Recibido: {dato}")
Usamos Process para crear procesos.

Usamos Queue() para intercambiar datos.

Aplicamos .join() para esperar que los procesos terminen.

4. üë• Ejemplos pr√°cticos
a) Comunicaci√≥n unidireccional simple (1 productor, 1 consumidor)
b) M√∫ltiples consumidores (1 productor, 2 consumidores)
Se usaron dos colas separadas o una sola cola con l√≥gica para distribuir los datos.

Se us√≥ None para indicar a cada consumidor que termin√≥.

c) Pipeline simple (encadenamiento de procesos)
Cada proceso transforma el dato y lo pasa al siguiente a trav√©s de una nueva cola.

5. üß© Patrones avanzados
Productor-consumidor: muy com√∫n, donde uno produce datos y varios los consumen.

Pipeline: varios procesos encadenados, cada uno con una funci√≥n distinta (ej: leer ‚Üí transformar ‚Üí guardar).

6. ‚ö†Ô∏è Problemas comunes y c√≥mo prevenirlos
‚ùå Deadlocks: cuando un proceso espera datos que nunca llegan.
‚úÖ Soluci√≥n: usar se√±ales de final y timeout si es necesario.

‚ùå Colas que no se vac√≠an: por no consumir todos los elementos o no cerrar bien.
‚úÖ Soluci√≥n: consumir hasta recibir un valor de fin.

‚úÖ Usar .join() para esperar la finalizaci√≥n de los procesos hijos.

‚úÖ Usar valores sentinela (None) para comunicar que no hay m√°s datos.

7. üÜö Diferencias con Pipes

Caracter√≠stica	Queue	Pipe
Direcci√≥n	Bidireccional o unidireccional	Unidireccional
Seguridad	M√°s segura (usa locking interno)	M√°s simple, pero propensa a errores
Capacidad	Ilimitada por defecto	Limitada
Facilidad de uso	M√°s abstracta, f√°cil con m√∫ltiples procesos	Requiere m√°s control manual
‚úÖ Logros del aprendizaje
Comprendiste el rol y funcionamiento de las queues.

Implementaste ejemplos reales y ejecutaste procesos concurrentes.

Analizaste el comportamiento del sistema al correrlos.

Identificaste buenas pr√°cticas y errores comunes.

