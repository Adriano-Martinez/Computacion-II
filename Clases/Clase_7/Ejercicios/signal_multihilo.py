import os
import signal
import threading
import time

# Manejador de seÃ±al
def signal_handler(signum, frame):
    print(f"ğŸ”” SeÃ±al recibida: {signum} en el hilo principal")

# FunciÃ³n que ejecutan los hilos secundarios
def hilo_secundario():
    print(f"ğŸ§µ Hilo secundario (PID: {os.getpid()}) iniciado.")
    time.sleep(10)
    print("ğŸ§µ Hilo secundario ha terminado.")

# Configurar el manejador de seÃ±ales
signal.signal(signal.SIGUSR1, signal_handler)

# Crear hilos secundarios
hilos = []
for i in range(3):
    hilo = threading.Thread(target=hilo_secundario)
    hilos.append(hilo)
    hilo.start()

# Imprimir PID y esperar una seÃ±al
print(f"ğŸ“Œ Hilo principal (PID: {os.getpid()}) esperando seÃ±ales...")
print(f"ğŸ“Œ Esperando en el hilo principal, presiona Ctrl+C o envÃ­a SIGUSR1 al proceso.")

# Esperar en el hilo principal
time.sleep(15)

# Enviar la seÃ±al SIGUSR1 al proceso
os.kill(os.getpid(), signal.SIGUSR1)

# Unir los hilos secundarios para que terminen
for hilo in hilos:
    hilo.join()

print("âœ… Todos los hilos han terminado.")
