1. Procesos vs Hilos
Procesos: cada uno tiene su propia memoria. Son m√°s seguros pero m√°s costosos en recursos.

Hilos: comparten la misma memoria, lo que permite m√°s velocidad pero puede causar conflictos.

üîπ 2. Creaci√≥n de Procesos
Se usa multiprocessing.Process.

Cada proceso ejecuta una funci√≥n independiente.

Ejemplo b√°sico:

python
Copiar
Editar
from multiprocessing import Process

def saludar():
    print("Hola desde el proceso")

p = Process(target=saludar)
p.start()
p.join()
üîπ 3. Comunicaci√≥n entre Procesos
Pipes
Conectan dos procesos.

Env√≠an mensajes de un proceso a otro.

python
Copiar
Editar
from multiprocessing import Pipe

parent, child = Pipe()
child.send("Hola")
print(parent.recv())  # "Hola"
Queues
Usadas para comunicar m√°s de dos procesos.

Son seguras y permiten pasar datos entre procesos f√°cilmente.

python
Copiar
Editar
from multiprocessing import Queue

q = Queue()
q.put("dato")
print(q.get())
üîπ 4. Condiciones de Carrera y Locks
Condici√≥n de carrera: ocurre cuando varios procesos acceden/modifican una variable sin coordinaci√≥n.

Lock: evita condiciones de carrera bloqueando el acceso simult√°neo.

python
Copiar
Editar
from multiprocessing import Lock

lock = Lock()
with lock:
    # Secci√≥n cr√≠tica
    variable += 1
üîπ 5. Memoria Compartida
Value y Array
Value: permite compartir un valor √∫nico (int, float, etc.).

Array: permite compartir una lista de valores.

python
Copiar
Editar
from multiprocessing import Value, Array

val = Value('i', 0)  # entero inicializado en 0
arr = Array('i', [0, 1, 2])  # array de enteros
üîπ 6. Pool de Procesos
Crea un grupo de procesos reutilizables.

M√©todos:

apply(): ejecuta una funci√≥n de forma secuencial.

map(): aplica una funci√≥n a una lista de datos en paralelo.

apply_async() y map_async(): versiones as√≠ncronas.

python
Copiar
Editar
from multiprocessing import Pool

def f(x):
    return x*x

with Pool(4) as p:
    print(p.map(f, [1, 2, 3, 4]))
üîπ 7. Comparaciones √∫tiles
Herramienta	Uso principal
Process	Crear procesos independientes
Pipe	Comunicaci√≥n entre 2 procesos
Queue	Comunicaci√≥n entre varios procesos
Lock	Sincronizaci√≥n para evitar conflictos
Value, Array	Compartir memoria
Pool	Ejecutar tareas en paralelo f√°cilmente

‚úÖ Conceptos clave consolidados
Separaci√≥n de memoria en procesos vs hilos.

Importancia de sincronizar acceso a recursos.

Comunicaci√≥n eficiente con Queue.

Uso correcto de memoria compartida y procesos en grupo.

